---
name: $(Build.DefinitionName)-$(date:yyyyMMdd)$(rev:.r)

trigger: none

# parameters are typed with defaults so they are correctly populated, you will get a choice in the GUI to edit these, but you should keep all changes as code.
parameters:

  - name: SHORTHAND_ENVIRONMENT_NAME
    default: uat
    displayName: "What is the shorthand name for this environment?"
    type: string
    values:
      - dev
      - poc
      - mvp
      - tst
      - uat
      - ppd
      - prd

  - name: SHORTHAND_PROJECT_NAME
    type: string
    default: "ldo"
    displayName: "Shorthand Project e.g. lbdo for libredevops"

  - name: SHORTHAND_LOCATION_NAME
    type: string
    default: "euw"
    displayName: "3 character location name, e.g., uks, ukw, euw"

  - name: TERRAFORM_PATH
    type: string
    default: "avd-image-packer-build/terraform"
    displayName: "What is the path to your terraform code?"

  - name: TERRAFORM_VERSION
    type: string
    default: "1.4.4"
    displayName: "Which version of Terraform should be installed?"

  - name: VARIABLE_GROUP_NAME
    type: string
    default: "svp-kv-ldo-euw-uat-mgt-01"
    displayName: "Enter the variable group which contains your authentication information"

# This variable sets up a condition in the template, if set to true, it will run terraform plan -destroy instead of the normal plan
  - name: TERRAFORM_DESTROY
    default: false
    displayName: "Check box to run a Destroy"
    type: boolean

  - name: TERRAFORM_PLAN_ONLY
    default: false
    displayName: "Check box to run plan ONLY and never run apply"
    type: boolean

  - name: CHECKOV_SKIP_TESTS
    type: string
    default: 'CKV2_AZURE_1,CKV2_AZURE_18,CKV_AZURE_23,CKV_AZURE_24,CKV2_AZURE_31,CKV_AZURE_33,CKV_AZURE_35,CKV_AZURE_59,CKV_AZURE_97,CKV_AZURE_190,CKV_AZURE_206'
    displayName: "CheckOV tests to skip if comment skips don't work.  All checks run if parameter is empty, empty by default"

  - name: ADD_CLIENT_IP_TO_NSG
    type: boolean
    default: true
    displayName: Whether your client IP should be added to NSG, if this is set to true, NSG_ID must also be set

  - name: PACKER_PATH
    type: string
    default: "packer/windows/10"
    displayName: "What is the path to your packer code?"

  - name: PACKER_FILE_NAME
    type: string
    default: "packer.pkr.hcl"
    displayName: "What is the name of your packer file?"

# Declare variable group to pass variables to parameters, in this case, a libre-devops keyvault which is using a service principle for authentication
variables:
  - group: ${{ parameters.VARIABLE_GROUP_NAME }}

# Sets what repos need cloned, for example, a library repo for modules and a poly-repo for target code
resources:
  repositories:

  - repository: azure-naming-convention
    type: github
    endpoint: github_service_connection
    name: libre-devops/azure-naming-convention
    ref: main

  - repository: terraform-azdo-pipeline-template
    type: github
    endpoint: github_service_connection
    name: libre-devops/terraform-azdo-pipeline-template
    ref: main

  - repository: packer-azdo-pipeline-template
    type: github
    endpoint: github_service_connection
    name: libre-devops/packer-azdo-pipeline-template
    ref: main

# You may wish to use a separate or self-hosted agent per job, by default, all jobs will inherit stage agent
pool:
  name: Azure Pipelines
  vmImage: ubuntu-latest

# Sets stage so that multiple stages can be used if needed, as it stands, only 1 stage is expected and is thus passed as a parameter
stages:
  - stage: "${{ parameters.SHORTHAND_ENVIRONMENT_NAME }}_PreReq"
    displayName: "${{ parameters.SHORTHAND_ENVIRONMENT_NAME }} PreReq Stage"
    jobs:
      - job: Terraform_Build
        workspace:
          clean: all
        pool:
          vmImage: 'ubuntu-latest'
        displayName: Terraform Build
        steps:

          # Declare the repos needed from the resources list
          - checkout: self
          - checkout: azure-naming-convention

          # Remotely fetch pipeline template, in this case, I am using one in my development repo.
          - template: /.azurepipelines/.templates/terraform-cicd-template.yml@terraform-azdo-pipeline-template
            parameters:
              SHORTHAND_PROJECT_NAME: ${{ parameters.SHORTHAND_PROJECT_NAME }} # Parameters entered in YAML
              SHORTHAND_ENVIRONMENT_NAME: ${{ parameters.SHORTHAND_ENVIRONMENT_NAME }}
              SHORTHAND_LOCATION_NAME: ${{ parameters.SHORTHAND_LOCATION_NAME }}
              TERRAFORM_PATH: "${{ parameters.TERRAFORM_PATH }}/0-pre-req"
              TERRAFORM_VERSION: ${{ parameters.TERRAFORM_VERSION }}
              TERRAFORM_DESTROY: ${{ parameters.TERRAFORM_DESTROY }}
              TERRAFORM_PLAN_ONLY: ${{ parameters.TERRAFORM_PLAN_ONLY }}
              TERRAFORM_STORAGE_RG_NAME: $(SpokeSaRgName) # Key Vault variable
              TERRAFORM_STORAGE_ACCOUNT_NAME: $(SpokeSaName)
              TERRAFORM_BLOB_CONTAINER_NAME: $(SpokeSaBlobContainerName)
              TERRAFORM_STORAGE_KEY: $(SpokeSaPrimaryKey)
              TERRAFORM_STATE_NAME: "ldo-win10-uat-pre-req.terraform.tfstate"
              TERRAFORM_WORKSPACE_NAME: ${{ parameters.SHORTHAND_ENVIRONMENT_NAME }}
              TERRAFORM_COMPLIANCE_PATH: "$(Build.SourcesDirectory)/azure-naming-convention/az-terraform-compliance-policy"
              AZURE_TARGET_CLIENT_ID: $(SpokeSvpClientId)
              AZURE_TARGET_CLIENT_SECRET: $(SpokeSvpClientSecret)
              AZURE_TARGET_TENANT_ID: $(SpokeTenantId)
              AZURE_TARGET_SUBSCRIPTION_ID: $(SpokeSubID)
              CHECKOV_SKIP_TESTS: ${{ parameters.CHECKOV_SKIP_TESTS }}

  - stage: "${{ parameters.SHORTHAND_ENVIRONMENT_NAME }}"
    dependsOn: "${{ parameters.SHORTHAND_ENVIRONMENT_NAME }}_PreReq"
    displayName: "${{ parameters.SHORTHAND_ENVIRONMENT_NAME }} Stage"
    jobs:
      - job: Packer_Build
        workspace:
          clean: all
        timeoutInMinutes: 300
        variables:
          PKR_VAR_install_user: "installer"
          PKR_VAR_install_password: $(LocalLdoAdminUatPwd)
        displayName: Packer Build

        steps:
          - ${{ if eq(parameters.ADD_CLIENT_IP_TO_NSG, true) }}:

              - pwsh: |
                  $OutboundIp = (Invoke-RestMethod -Uri "https://checkip.amazonaws.com" -UseBasicParsing).Trim() ; `
                  az login --service-principal --username $Env:ARM_CLIENT_ID --password $Env:ARM_CLIENT_SECRET --tenant $Env:ARM_TENANT_ID
                  az account set --subscription $Env:ARM_SUBSCRIPTION_ID
                  $nsgId = "$(NsgId)"

                  $subscriptionId = (Split-Path -Path $nsgId -Parent).Split('/')[2]
                  $resourceGroupName = (Split-Path -Path $nsgId -Parent).Split('/')[4]
                  $nsgName = Split-Path -Path $nsgId -Leaf ; `
                  az account set --subscription $subscriptionId
                  az network nsg rule create `
                  --nsg-name $nsgName `
                  --resource-group $resourceGroupName `
                  --name "AddClientIPInbound" `
                  --priority 100 `
                  --source-address-prefixes "${OutboundIp}/32" `
                  --destination-port-ranges 22 3389 `
                  --destination-address-prefixes "VirtualNetwork" `
                  --access Allow `
                  --protocol Tcp `
                  --description "Allow inbound access on port to ports, added by Azure DevOps on $(Get-Date) - build - $(Build.BuildId)" ; `

                  az network nsg rule create `
                  --nsg-name $nsgName `
                  --resource-group $resourceGroupName `
                  --name "AddClientIPWinRmInbound" `
                  --priority 101 `
                  --source-address-prefixes "${OutboundIp}/32" `
                  --destination-port-ranges 5985 5986 `
                  --destination-address-prefixes "VirtualNetwork" `
                  --access Allow `
                  --protocol Tcp `
                  --description "Allow inbound access on port to ports, added by Azure DevOps on $(Get-Date) - build - $(Build.BuildId)"

                displayName: 'Get Outbound IP and add to NSG'
                continueOnError: false
                enabled: true
                env:
                  ARM_CLIENT_ID: $(SpokeSvpClientId)
                  ARM_CLIENT_SECRET: $(SpokeSvpClientSecret)
                  ARM_SUBSCRIPTION_ID: $(SpokeSubId)
                  ARM_TENANT_ID: $(SpokeTenantId)

              - pwsh: |
                  if ($IsLinux)
                  {
                  $brewShellEnv = & /home/linuxbrew/.linuxbrew/bin/brew shellenv
                  foreach ($line in $brewShellEnv) {
                  Invoke-Expression $line
                  }
                  brew install packer ; `
                  packer validate ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }}  ; packer build ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} 
                  }
                  elseif ($IsMacOS)
                  {
                  $brewShellEnv = & /home/linuxbrew/.linuxbrew/bin/brew shellenv
                  foreach ($line in $brewShellEnv) {
                  Invoke-Expression $line
                  }
                  brew install packer ; `
                  packer validate ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }}  ; packer build ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} 
                  }
                  elseif ($IsWindows)
                  {
                    Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
                    choco install packer -y ; `
                    packer validate ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} ; ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} 
                  }
                displayName: 'Packer install, validate and build'
                continueOnError: false
                enabled: true
                env:
                  PKR_VAR_short: ${{ parameters.SHORTHAND_PROJECT_NAME }}
                  PKR_VAR_env: ${{ parameters.SHORTHAND_ENVIRONMENT_NAME }}
                  PKR_VAR_loc: ${{ parameters.SHORTHAND_LOCATION_NAME }}
                  PKR_VAR_install_password: $(LocalLdoAdminUatPwd)

                  ARM_CLIENT_ID: $(SpokeSvpClientId)
                  ARM_CLIENT_SECRET: $(SpokeSvpClientSecret)
                  ARM_SUBSCRIPTION_ID: $(SpokeSubId)
                  ARM_TENANT_ID: $(SpokeTenantId)


              - pwsh: |
                  az login --service-principal --username $Env:ARM_CLIENT_ID --password $Env:ARM_CLIENT_SECRET --tenant $Env:ARM_TENANT_ID
                  az account set --subscription $Env:ARM_SUBSCRIPTION_ID
                  $nsgId = "$(NsgId)"
                  $subscriptionId = (Split-Path -Path $nsgId -Parent).Split('/')[2]
                  $resourceGroupName = (Split-Path -Path $nsgId -Parent).Split('/')[4]
                  $nsgName = Split-Path -Path $nsgId -Leaf ; `
                  az account set --subscription $subscriptionId
                  az network nsg rule delete `
                  --resource-group $resourceGroupName `
                  --nsg-name $nsgName `
                  --name "AddClientIPInbound" ; `
                  az network nsg rule delete `
                  --resource-group $resourceGroupName `
                  --nsg-name $nsgName `
                  --name "AddClientIPWinRmInbound"

                displayName: 'Remove Temporary Rule'
                continueOnError: true
                condition: always()
                enabled: true
                env:
                  ARM_CLIENT_ID: $(SpokeSvpClientId)
                  ARM_CLIENT_SECRET: $(SpokeSvpClientSecret)
                  ARM_SUBSCRIPTION_ID: $(SpokeSubId)
                  ARM_TENANT_ID: $(SpokeTenantId)

          - ${{ if eq(parameters.ADD_CLIENT_IP_TO_NSG, false) }}:

              - pwsh: |
                  if ($IsLinux)
                  {
                  $brewShellEnv = & /home/linuxbrew/.linuxbrew/bin/brew shellenv
                  foreach ($line in $brewShellEnv) {
                  Invoke-Expression $line
                  }
                  brew install packer ; `
                  packer validate ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }}  ; packer build ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} 
                  }
                  elseif ($IsMacOS)
                  {
                  $brewShellEnv = & /home/linuxbrew/.linuxbrew/bin/brew shellenv
                  foreach ($line in $brewShellEnv) {
                  Invoke-Expression $line
                  }
                  brew install packer ; `
                  packer validate ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }}  ; packer build ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} 
                  }
                  elseif ($IsWindows)
                  {
                    Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
                    choco install packer -y ; `
                    packer validate ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} ; ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} 
                  }
                displayName: 'Packer install, validate and build'
                continueOnError: false
                enabled: true
                env:
                  PKR_VAR_short: ${{ parameters.SHORTHAND_PROJECT_NAME }}
                  PKR_VAR_env: ${{ parameters.SHORTHAND_ENVIRONMENT_NAME }}
                  PKR_VAR_loc: ${{ parameters.SHORTHAND_LOCATION_NAME }}
                  PKR_VAR_install_password: $(LocalLdoAdminUatPwd)

                  ARM_CLIENT_ID: $(SpokeSvpClientId)
                  ARM_CLIENT_SECRET: $(SpokeSvpClientSecret)
                  ARM_SUBSCRIPTION_ID: $(SpokeSubId)
                  ARM_TENANT_ID: $(SpokeTenantId)
