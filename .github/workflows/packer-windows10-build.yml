name: "Packer Build - Win10 - Fat"

# Allow run manually
on:
  workflow_dispatch:

env:
  BUILD_DEFINITION_NAME: "Example"
  BUILD_DATE: "${{ github.run_id }}"
  REV: "r"

jobs:
  packer-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - SHORTHAND_ENVIRONMENT_NAME: uat
            SHORTHAND_PROJECT_NAME: ldo
            SHORTHAND_LOCATION_NAME: euw
            ADD_CLIENT_IP_TO_NSG: true
            NSG_ID_SECRET: NSG_ID
            INSTALL_PASSWORD_SECRET: LocalLdoAdminUatPwd
            PACKER_PATH: "packer/windows/fat-10"
            PACKER_FILE_NAME: "packer.pkr.hcl"
            IMAGE_GALLERY_RG_NAME: "rg-ldo-euw-uat-build"
            IMAGE_GALLERY_NAME: "galldoeuwuat01"
            IMAGE_DEFINITION_NAME: "ldo-avd-windows-10-fat"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install azure-cli pywinrm
        shell: pwsh

      - name: Add NSG rules if enabled
        if: matrix.ADD_CLIENT_IP_TO_NSG == true
        run: |
          $OutboundIp = (Invoke-RestMethod -Uri "https://checkip.amazonaws.com" -UseBasicParsing).Trim() ; `
          az login --service-principal --username $Env:ARM_CLIENT_ID --password $Env:ARM_CLIENT_SECRET --tenant $Env:ARM_TENANT_ID
          az account set --subscription $Env:ARM_SUBSCRIPTION_ID
          $nsgId = "${{ secrets[matrix.NSG_ID_SECRET] }}"

          $subscriptionId = (Split-Path -Path $nsgId -Parent).Split('/')[2]
          $resourceGroupName = (Split-Path -Path $nsgId -Parent).Split('/')[4]
          $nsgName = Split-Path -Path $nsgId -Leaf ; `
          az account set --subscription $subscriptionId
          az network nsg rule create `
          --nsg-name $nsgName `
          --resource-group $resourceGroupName `
          --name "AddClientIPInbound" `
          --priority 100 `
          --source-address-prefixes "${OutboundIp}/32" `
          --destination-port-ranges 22 3389 `
          --destination-address-prefixes "VirtualNetwork" `
          --access Allow `
          --protocol Tcp `
          --description "Allow inbound access on port to ports, added by Azure DevOps on $(Get-Date)" ; `

          az network nsg rule create `
          --nsg-name $nsgName `
          --resource-group $resourceGroupName `
          --name "AddClientIPWinRmInbound" `
          --priority 101 `
          --source-address-prefixes "${OutboundIp}/32" `
          --destination-port-ranges 5985 5986 `
          --destination-address-prefixes "VirtualNetwork" `
          --access Allow `
          --protocol Tcp `
          --description "Allow inbound access on port to ports, added by Azure DevOps on $(Get-Date)2"

        env:
          ARM_CLIENT_ID: ${{ secrets.SpokeSvpClientId }}
          ARM_CLIENT_SECRET: ${{ secrets.SpokeSvpClientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SpokeSubId }}
          ARM_TENANT_ID: ${{ secrets.SpokeTenantId }}
        shell: pwsh

      - name: Set up Packer
        run: |
          if ($IsLinux)
          {
            $brewShellEnv = & /home/linuxbrew/.linuxbrew/bin/brew shellenv
            foreach ($line in $brewShellEnv) {
              Invoke-Expression $line
            }
            brew install packer ; `
          }
          elseif ($IsMacOS)
          {
            $brewShellEnv = & /home/linuxbrew/.linuxbrew/bin/brew shellenv
            foreach ($line in $brewShellEnv) {
              Invoke-Expression $line
            }
            brew install packer ; `
          }
          elseif ($IsWindows)
          {
            Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
            choco install packer -y ; `
          }
        shell: pwsh

      - name: Packer install, validate, and build
        run: |
          packer validate ${{ matrix.PACKER_PATH }}/${{ matrix.PACKER_FILE_NAME }}
          packer build ${{ matrix.PACKER_PATH }}/${{ matrix.PACKER_FILE_NAME }}
        env:
          PKR_VAR_short: ${{ matrix.SHORTHAND_PROJECT_NAME }}
          PKR_VAR_env: ${{ matrix.SHORTHAND_ENVIRONMENT_NAME }}
          PKR_VAR_loc: ${{ matrix.SHORTHAND_LOCATION_NAME }}
          PKR_VAR_install_password: ${{ secrets[matrix.INSTALL_PASSWORD_SECRET] }}
          ARM_CLIENT_ID: ${{ secrets.SpokeSvpClientId }}
          ARM_CLIENT_SECRET: ${{ secrets.SpokeSvpClientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SpokeSubId }}
          ARM_TENANT_ID: ${{ secrets.SpokeTenantId }}
        shell: pwsh

      - name: Remove Temporary Rule
        run: |
          az login --service-principal --username $Env:ARM_CLIENT_ID --password $Env:ARM_CLIENT_SECRET --tenant $Env:ARM_TENANT_ID
          az account set --subscription $Env:ARM_SUBSCRIPTION_ID
          $nsgId = "${{ secrets[matrix.NSG_ID_SECRET] }}"
          
          $subscriptionId = (Split-Path -Path $nsgId -Parent).Split('/')[2]
          $resourceGroupName = (Split-Path -Path $nsgId -Parent).Split('/')[4]
          $nsgName = Split-Path -Path $nsgId -Leaf ; `
          az account set --subscription $subscriptionId
          az network nsg rule delete `
          --resource-group $resourceGroupName `
          --nsg-name $nsgName `
          --name "AddClientIPInbound" ; `
          az network nsg rule delete `
          --resource-group $resourceGroupName `
          --nsg-name $nsgName `
          --name "AddClientIPWinRmInbound"
        if: always()
        continue-on-error: true
        env:
          ARM_CLIENT_ID: ${{ secrets.SpokeSvpClientId }}
          ARM_CLIENT_SECRET: ${{ secrets.SpokeSvpClientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SpokeSubId }}
          ARM_TENANT_ID: ${{ secrets.SpokeTenantId }}
        shell: pwsh

